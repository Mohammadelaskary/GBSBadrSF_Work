// Generated by Dagger (https://dagger.dev).
package com.example.gbsbadrsf.di.component;

import androidx.lifecycle.ViewModel;
import com.example.gbsbadrsf.Manfacturing.machinesignoff.MachinesignoffViewModel;
import com.example.gbsbadrsf.Manfacturing.machinesignoff.MachinesignoffViewModel_Factory;
import com.example.gbsbadrsf.Manfacturing.machinesignoff.ProductionSignoffFragment;
import com.example.gbsbadrsf.Manfacturing.machinesignoff.ProductionSignoffFragment_MembersInjector;
import com.example.gbsbadrsf.Util.MyApplication;
import com.example.gbsbadrsf.Util.ViewModelProviderFactory;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_Contributeproductionsequencefragment;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_MachineLoadingFragment;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_ProductionSignoffFragment;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_SigninFragment;
import com.example.gbsbadrsf.di.module.RetrofitModule;
import com.example.gbsbadrsf.di.module.RetrofitModule_GetRetrofitInstanceFactory;
import com.example.gbsbadrsf.di.module.RetrofitModule_ProvideGsonFactory;
import com.example.gbsbadrsf.di.module.RetrofitModule_ProvideLoggingInterceptorFactory;
import com.example.gbsbadrsf.di.module.RetrofitModule_ProvideOkHttpClientFactory;
import com.example.gbsbadrsf.di.module.RetrofitModule_ProvidesAPiInterfaceFactory;
import com.example.gbsbadrsf.machineloading.MachineLoadingFragment;
import com.example.gbsbadrsf.machineloading.MachineLoadingFragment_MembersInjector;
import com.example.gbsbadrsf.machineloading.MachineloadingViewModel;
import com.example.gbsbadrsf.machineloading.MachineloadingViewModel_Factory;
import com.example.gbsbadrsf.productionsequence.ProductionSequence;
import com.example.gbsbadrsf.productionsequence.ProductionSequence_MembersInjector;
import com.example.gbsbadrsf.productionsequence.ProductionsequenceViewModel;
import com.example.gbsbadrsf.productionsequence.ProductionsequenceViewModel_Factory;
import com.example.gbsbadrsf.productionsequence.SelectedLoadinsequenceinfoViewModel;
import com.example.gbsbadrsf.productionsequence.SelectedLoadinsequenceinfoViewModel_Factory;
import com.example.gbsbadrsf.repository.ApiInterface;
import com.example.gbsbadrsf.repository.Authenticationrepository;
import com.example.gbsbadrsf.repository.Authenticationrepository_Factory;
import com.example.gbsbadrsf.repository.Productionsequencerepository;
import com.example.gbsbadrsf.repository.Productionsequencerepository_Factory;
import com.example.gbsbadrsf.signin.SignInViewModel;
import com.example.gbsbadrsf.signin.SignInViewModel_Factory;
import com.example.gbsbadrsf.signin.SigninFragment;
import com.example.gbsbadrsf.signin.SigninFragment_MembersInjector;
import com.google.gson.Gson;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent implements ApplicationComponent {
  private Provider<ActivityBuilderModule_Contributeproductionsequencefragment.ProductionSequenceSubcomponent.Factory> productionSequenceSubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_SigninFragment.SigninFragmentSubcomponent.Factory> signinFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_MachineLoadingFragment.MachineLoadingFragmentSubcomponent.Factory> machineLoadingFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_ProductionSignoffFragment.ProductionSignoffFragmentSubcomponent.Factory> productionSignoffFragmentSubcomponentFactoryProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<HttpLoggingInterceptor> provideLoggingInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> getRetrofitInstanceProvider;

  private Provider<ApiInterface> providesAPiInterfaceProvider;

  private DaggerApplicationComponent(RetrofitModule retrofitModuleParam,
      MyApplication Application) {

    initialize(retrofitModuleParam, Application);
  }

  public static ApplicationComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(4).put(ProductionSequence.class, (Provider) productionSequenceSubcomponentFactoryProvider).put(SigninFragment.class, (Provider) signinFragmentSubcomponentFactoryProvider).put(MachineLoadingFragment.class, (Provider) machineLoadingFragmentSubcomponentFactoryProvider).put(ProductionSignoffFragment.class, (Provider) productionSignoffFragmentSubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final RetrofitModule retrofitModuleParam,
      final MyApplication Application) {
    this.productionSequenceSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_Contributeproductionsequencefragment.ProductionSequenceSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_Contributeproductionsequencefragment.ProductionSequenceSubcomponent.Factory get(
          ) {
        return new ProductionSequenceSubcomponentFactory();}
    };
    this.signinFragmentSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_SigninFragment.SigninFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_SigninFragment.SigninFragmentSubcomponent.Factory get() {
        return new SigninFragmentSubcomponentFactory();}
    };
    this.machineLoadingFragmentSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_MachineLoadingFragment.MachineLoadingFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_MachineLoadingFragment.MachineLoadingFragmentSubcomponent.Factory get(
          ) {
        return new MachineLoadingFragmentSubcomponentFactory();}
    };
    this.productionSignoffFragmentSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ProductionSignoffFragment.ProductionSignoffFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ProductionSignoffFragment.ProductionSignoffFragmentSubcomponent.Factory get(
          ) {
        return new ProductionSignoffFragmentSubcomponentFactory();}
    };
    this.provideGsonProvider = DoubleCheck.provider(RetrofitModule_ProvideGsonFactory.create(retrofitModuleParam));
    this.provideLoggingInterceptorProvider = DoubleCheck.provider(RetrofitModule_ProvideLoggingInterceptorFactory.create(retrofitModuleParam));
    this.provideOkHttpClientProvider = DoubleCheck.provider(RetrofitModule_ProvideOkHttpClientFactory.create(retrofitModuleParam, provideLoggingInterceptorProvider));
    this.getRetrofitInstanceProvider = DoubleCheck.provider(RetrofitModule_GetRetrofitInstanceFactory.create(provideGsonProvider, provideOkHttpClientProvider));
    this.providesAPiInterfaceProvider = DoubleCheck.provider(RetrofitModule_ProvidesAPiInterfaceFactory.create(getRetrofitInstanceProvider));
  }

  @Override
  public void inject(MyApplication arg0) {
    injectMyApplication(arg0);}

  private MyApplication injectMyApplication(MyApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements ApplicationComponent.Builder {
    private MyApplication Application;

    @Override
    public Builder Application(MyApplication application) {
      this.Application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(Application, MyApplication.class);
      return new DaggerApplicationComponent(new RetrofitModule(), Application);
    }
  }

  private final class ProductionSequenceSubcomponentFactory implements ActivityBuilderModule_Contributeproductionsequencefragment.ProductionSequenceSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_Contributeproductionsequencefragment.ProductionSequenceSubcomponent create(
        ProductionSequence arg0) {
      Preconditions.checkNotNull(arg0);
      return new ProductionSequenceSubcomponentImpl(arg0);
    }
  }

  private final class ProductionSequenceSubcomponentImpl implements ActivityBuilderModule_Contributeproductionsequencefragment.ProductionSequenceSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private ProductionSequenceSubcomponentImpl(ProductionSequence arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(5).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).build();}

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());}

    @SuppressWarnings("unchecked")
    private void initialize(final ProductionSequence arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(ProductionSequence arg0) {
      injectProductionSequence(arg0);}

    private ProductionSequence injectProductionSequence(ProductionSequence instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      ProductionSequence_MembersInjector.injectProvider(instance, getViewModelProviderFactory());
      ProductionSequence_MembersInjector.injectGson(instance, DaggerApplicationComponent.this.provideGsonProvider.get());
      return instance;
    }
  }

  private final class SigninFragmentSubcomponentFactory implements ActivityBuilderModule_SigninFragment.SigninFragmentSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_SigninFragment.SigninFragmentSubcomponent create(
        SigninFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SigninFragmentSubcomponentImpl(arg0);
    }
  }

  private final class SigninFragmentSubcomponentImpl implements ActivityBuilderModule_SigninFragment.SigninFragmentSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private SigninFragmentSubcomponentImpl(SigninFragment arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(5).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).build();}

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());}

    @SuppressWarnings("unchecked")
    private void initialize(final SigninFragment arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(SigninFragment arg0) {
      injectSigninFragment(arg0);}

    private SigninFragment injectSigninFragment(SigninFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      SigninFragment_MembersInjector.injectProviderFactory(instance, getViewModelProviderFactory());
      return instance;
    }
  }

  private final class MachineLoadingFragmentSubcomponentFactory implements ActivityBuilderModule_MachineLoadingFragment.MachineLoadingFragmentSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_MachineLoadingFragment.MachineLoadingFragmentSubcomponent create(
        MachineLoadingFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new MachineLoadingFragmentSubcomponentImpl(arg0);
    }
  }

  private final class MachineLoadingFragmentSubcomponentImpl implements ActivityBuilderModule_MachineLoadingFragment.MachineLoadingFragmentSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private MachineLoadingFragmentSubcomponentImpl(MachineLoadingFragment arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(5).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).build();}

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());}

    @SuppressWarnings("unchecked")
    private void initialize(final MachineLoadingFragment arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(MachineLoadingFragment arg0) {
      injectMachineLoadingFragment(arg0);}

    private MachineLoadingFragment injectMachineLoadingFragment(MachineLoadingFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      MachineLoadingFragment_MembersInjector.injectProviderFactory(instance, getViewModelProviderFactory());
      return instance;
    }
  }

  private final class ProductionSignoffFragmentSubcomponentFactory implements ActivityBuilderModule_ProductionSignoffFragment.ProductionSignoffFragmentSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ProductionSignoffFragment.ProductionSignoffFragmentSubcomponent create(
        ProductionSignoffFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new ProductionSignoffFragmentSubcomponentImpl(arg0);
    }
  }

  private final class ProductionSignoffFragmentSubcomponentImpl implements ActivityBuilderModule_ProductionSignoffFragment.ProductionSignoffFragmentSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private ProductionSignoffFragmentSubcomponentImpl(ProductionSignoffFragment arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(5).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).build();}

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());}

    @SuppressWarnings("unchecked")
    private void initialize(final ProductionSignoffFragment arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(ProductionSignoffFragment arg0) {
      injectProductionSignoffFragment(arg0);}

    private ProductionSignoffFragment injectProductionSignoffFragment(
        ProductionSignoffFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      ProductionSignoffFragment_MembersInjector.injectProviderFactory(instance, getViewModelProviderFactory());
      return instance;
    }
  }
}
