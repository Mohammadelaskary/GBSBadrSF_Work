// Generated by Dagger (https://dagger.dev).
package com.example.gbsbadrsf.di.component;

import androidx.lifecycle.ViewModel;
import com.example.gbsbadrsf.Manfacturing.machinesignoff.MachinesignoffViewModel;
import com.example.gbsbadrsf.Manfacturing.machinesignoff.MachinesignoffViewModel_Factory;
import com.example.gbsbadrsf.Manfacturing.machinesignoff.ProductionSignoffFragment;
import com.example.gbsbadrsf.Manfacturing.machinesignoff.ProductionSignoffFragment_MembersInjector;
import com.example.gbsbadrsf.Production.Data.ProductionDefectRepairViewModel;
import com.example.gbsbadrsf.Production.Data.ProductionDefectRepairViewModel_Factory;
import com.example.gbsbadrsf.Production.Data.ProductionRejectionViewModel;
import com.example.gbsbadrsf.Production.Data.ProductionRejectionViewModel_Factory;
import com.example.gbsbadrsf.Production.Data.ProductionRepairViewModel;
import com.example.gbsbadrsf.Production.Data.ProductionRepairViewModel_Factory;
import com.example.gbsbadrsf.Production.ProductionDefectRepairFragment;
import com.example.gbsbadrsf.Production.ProductionDefectRepairFragment_MembersInjector;
import com.example.gbsbadrsf.Production.ProductionRepairFragment;
import com.example.gbsbadrsf.Production.ProductionRepairFragment_MembersInjector;
import com.example.gbsbadrsf.ProductionRejectionFragment;
import com.example.gbsbadrsf.ProductionRejectionFragment_MembersInjector;
import com.example.gbsbadrsf.Quality.Data.ManufacturingAddDefectsDetailsViewModel;
import com.example.gbsbadrsf.Quality.Data.ManufacturingAddDefectsDetailsViewModel_Factory;
import com.example.gbsbadrsf.Quality.Data.ManufacturingAddDefectsViewModel;
import com.example.gbsbadrsf.Quality.Data.ManufacturingAddDefectsViewModel_Factory;
import com.example.gbsbadrsf.Quality.Data.ManufacturingQualityOperationViewModel;
import com.example.gbsbadrsf.Quality.Data.ManufacturingQualityOperationViewModel_Factory;
import com.example.gbsbadrsf.Quality.Data.QualityDecisionViewModel;
import com.example.gbsbadrsf.Quality.Data.QualityDecisionViewModel_Factory;
import com.example.gbsbadrsf.Quality.Data.QualityDefectRepairViewModel;
import com.example.gbsbadrsf.Quality.Data.QualityDefectRepairViewModel_Factory;
import com.example.gbsbadrsf.Quality.Data.RandomQualityInceptionViewModel;
import com.example.gbsbadrsf.Quality.Data.RandomQualityInceptionViewModel_Factory;
import com.example.gbsbadrsf.Quality.manfacturing.ManufacturingAddDefects.ManufacturingAddDefectDetailsFragment;
import com.example.gbsbadrsf.Quality.manfacturing.ManufacturingAddDefects.ManufacturingAddDefectDetailsFragment_MembersInjector;
import com.example.gbsbadrsf.Quality.manfacturing.ManufacturingAddDefects.ManufacturingAddDefectsFragment;
import com.example.gbsbadrsf.Quality.manfacturing.ManufacturingAddDefects.ManufacturingAddDefectsFragment_MembersInjector;
import com.example.gbsbadrsf.Quality.manfacturing.ManufacturingAddDefects.QualityRepairViewModel;
import com.example.gbsbadrsf.Quality.manfacturing.ManufacturingAddDefects.QualityRepairViewModel_Factory;
import com.example.gbsbadrsf.Quality.manfacturing.ManufacturingQualityOperationFragment;
import com.example.gbsbadrsf.Quality.manfacturing.ManufacturingQualityOperationFragment_MembersInjector;
import com.example.gbsbadrsf.Quality.manfacturing.RandomQualityInception.RandomQualityInceptionFragment;
import com.example.gbsbadrsf.Quality.manfacturing.RandomQualityInception.RandomQualityInceptionFragment_MembersInjector;
import com.example.gbsbadrsf.Quality.manfacturing.qualitydesicion.QualityDecisionFragment;
import com.example.gbsbadrsf.Quality.manfacturing.qualitydesicion.QualityDecisionFragment_MembersInjector;
import com.example.gbsbadrsf.Quality.manfacturing.qualityrepair.QualityDefectRepairFragment;
import com.example.gbsbadrsf.Quality.manfacturing.qualityrepair.QualityDefectRepairFragment_MembersInjector;
import com.example.gbsbadrsf.Quality.manfacturing.qualityrepair.QualityRepairFragment;
import com.example.gbsbadrsf.Quality.manfacturing.qualityrepair.QualityRepairFragment_MembersInjector;
import com.example.gbsbadrsf.Util.MyApplication;
import com.example.gbsbadrsf.Util.ViewModelProviderFactory;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_ContributeManufacturingAddDefectDetailsFragment;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_ContributeManufacturingAddDefectsFragment;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_ContributeProductionDefectRepairFragment;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_ContributeProductionRejectionFragment;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_ContributeProductionRepairFragment;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_ContributeQualityDecisionFragment;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_ContributeQualityDefectRepairFragment;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_ContributeQualityManufacturingOperationFragment;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_ContributeQualityRepairFragment;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_ContributeRandomQualityInceptionFragment;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_Contributeproductionsequencefragment;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_MachineLoadingFragment;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_ProductionSignoffFragment;
import com.example.gbsbadrsf.di.module.ActivityBuilderModule_SigninFragment;
import com.example.gbsbadrsf.di.module.RetrofitModule;
import com.example.gbsbadrsf.di.module.RetrofitModule_GetRetrofitInstanceFactory;
import com.example.gbsbadrsf.di.module.RetrofitModule_ProvideGsonFactory;
import com.example.gbsbadrsf.di.module.RetrofitModule_ProvideLoggingInterceptorFactory;
import com.example.gbsbadrsf.di.module.RetrofitModule_ProvideOkHttpClientFactory;
import com.example.gbsbadrsf.di.module.RetrofitModule_ProvidesAPiInterfaceFactory;
import com.example.gbsbadrsf.machineloading.MachineLoadingFragment;
import com.example.gbsbadrsf.machineloading.MachineLoadingFragment_MembersInjector;
import com.example.gbsbadrsf.machineloading.MachineloadingViewModel;
import com.example.gbsbadrsf.machineloading.MachineloadingViewModel_Factory;
import com.example.gbsbadrsf.productionsequence.ProductionSequence;
import com.example.gbsbadrsf.productionsequence.ProductionSequence_MembersInjector;
import com.example.gbsbadrsf.productionsequence.ProductionsequenceViewModel;
import com.example.gbsbadrsf.productionsequence.ProductionsequenceViewModel_Factory;
import com.example.gbsbadrsf.productionsequence.SelectedLoadinsequenceinfoViewModel;
import com.example.gbsbadrsf.productionsequence.SelectedLoadinsequenceinfoViewModel_Factory;
import com.example.gbsbadrsf.repository.ApiInterface;
import com.example.gbsbadrsf.repository.Authenticationrepository;
import com.example.gbsbadrsf.repository.Authenticationrepository_Factory;
import com.example.gbsbadrsf.repository.Productionsequencerepository;
import com.example.gbsbadrsf.repository.Productionsequencerepository_Factory;
import com.example.gbsbadrsf.signin.SignInViewModel;
import com.example.gbsbadrsf.signin.SignInViewModel_Factory;
import com.example.gbsbadrsf.signin.SigninFragment;
import com.example.gbsbadrsf.signin.SigninFragment_MembersInjector;
import com.google.gson.Gson;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent implements ApplicationComponent {
  private Provider<ActivityBuilderModule_Contributeproductionsequencefragment.ProductionSequenceSubcomponent.Factory> productionSequenceSubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_SigninFragment.SigninFragmentSubcomponent.Factory> signinFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_MachineLoadingFragment.MachineLoadingFragmentSubcomponent.Factory> machineLoadingFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_ProductionSignoffFragment.ProductionSignoffFragmentSubcomponent.Factory> productionSignoffFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_ContributeQualityManufacturingOperationFragment.ManufacturingQualityOperationFragmentSubcomponent.Factory> manufacturingQualityOperationFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_ContributeManufacturingAddDefectsFragment.ManufacturingAddDefectsFragmentSubcomponent.Factory> manufacturingAddDefectsFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_ContributeManufacturingAddDefectDetailsFragment.ManufacturingAddDefectDetailsFragmentSubcomponent.Factory> manufacturingAddDefectDetailsFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_ContributeProductionDefectRepairFragment.ProductionDefectRepairFragmentSubcomponent.Factory> productionDefectRepairFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_ContributeProductionRepairFragment.ProductionRepairFragmentSubcomponent.Factory> productionRepairFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_ContributeQualityDefectRepairFragment.QualityDefectRepairFragmentSubcomponent.Factory> qualityDefectRepairFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_ContributeQualityRepairFragment.QualityRepairFragmentSubcomponent.Factory> qualityRepairFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_ContributeRandomQualityInceptionFragment.RandomQualityInceptionFragmentSubcomponent.Factory> randomQualityInceptionFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_ContributeProductionRejectionFragment.ProductionRejectionFragmentSubcomponent.Factory> productionRejectionFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_ContributeQualityDecisionFragment.QualityDecisionFragmentSubcomponent.Factory> qualityDecisionFragmentSubcomponentFactoryProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<HttpLoggingInterceptor> provideLoggingInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> getRetrofitInstanceProvider;

  private Provider<ApiInterface> providesAPiInterfaceProvider;

  private DaggerApplicationComponent(RetrofitModule retrofitModuleParam,
      MyApplication Application) {

    initialize(retrofitModuleParam, Application);
  }

  public static ApplicationComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(14).put(ProductionSequence.class, (Provider) productionSequenceSubcomponentFactoryProvider).put(SigninFragment.class, (Provider) signinFragmentSubcomponentFactoryProvider).put(MachineLoadingFragment.class, (Provider) machineLoadingFragmentSubcomponentFactoryProvider).put(ProductionSignoffFragment.class, (Provider) productionSignoffFragmentSubcomponentFactoryProvider).put(ManufacturingQualityOperationFragment.class, (Provider) manufacturingQualityOperationFragmentSubcomponentFactoryProvider).put(ManufacturingAddDefectsFragment.class, (Provider) manufacturingAddDefectsFragmentSubcomponentFactoryProvider).put(ManufacturingAddDefectDetailsFragment.class, (Provider) manufacturingAddDefectDetailsFragmentSubcomponentFactoryProvider).put(ProductionDefectRepairFragment.class, (Provider) productionDefectRepairFragmentSubcomponentFactoryProvider).put(ProductionRepairFragment.class, (Provider) productionRepairFragmentSubcomponentFactoryProvider).put(QualityDefectRepairFragment.class, (Provider) qualityDefectRepairFragmentSubcomponentFactoryProvider).put(QualityRepairFragment.class, (Provider) qualityRepairFragmentSubcomponentFactoryProvider).put(RandomQualityInceptionFragment.class, (Provider) randomQualityInceptionFragmentSubcomponentFactoryProvider).put(ProductionRejectionFragment.class, (Provider) productionRejectionFragmentSubcomponentFactoryProvider).put(QualityDecisionFragment.class, (Provider) qualityDecisionFragmentSubcomponentFactoryProvider).build();
  }

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final RetrofitModule retrofitModuleParam,
      final MyApplication Application) {
    this.productionSequenceSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_Contributeproductionsequencefragment.ProductionSequenceSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_Contributeproductionsequencefragment.ProductionSequenceSubcomponent.Factory get(
          ) {
        return new ProductionSequenceSubcomponentFactory();
      }
    };
    this.signinFragmentSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_SigninFragment.SigninFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_SigninFragment.SigninFragmentSubcomponent.Factory get() {
        return new SigninFragmentSubcomponentFactory();
      }
    };
    this.machineLoadingFragmentSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_MachineLoadingFragment.MachineLoadingFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_MachineLoadingFragment.MachineLoadingFragmentSubcomponent.Factory get(
          ) {
        return new MachineLoadingFragmentSubcomponentFactory();
      }
    };
    this.productionSignoffFragmentSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ProductionSignoffFragment.ProductionSignoffFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ProductionSignoffFragment.ProductionSignoffFragmentSubcomponent.Factory get(
          ) {
        return new ProductionSignoffFragmentSubcomponentFactory();
      }
    };
    this.manufacturingQualityOperationFragmentSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeQualityManufacturingOperationFragment.ManufacturingQualityOperationFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeQualityManufacturingOperationFragment.ManufacturingQualityOperationFragmentSubcomponent.Factory get(
          ) {
        return new ManufacturingQualityOperationFragmentSubcomponentFactory();
      }
    };
    this.manufacturingAddDefectsFragmentSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeManufacturingAddDefectsFragment.ManufacturingAddDefectsFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeManufacturingAddDefectsFragment.ManufacturingAddDefectsFragmentSubcomponent.Factory get(
          ) {
        return new ManufacturingAddDefectsFragmentSubcomponentFactory();
      }
    };
    this.manufacturingAddDefectDetailsFragmentSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeManufacturingAddDefectDetailsFragment.ManufacturingAddDefectDetailsFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeManufacturingAddDefectDetailsFragment.ManufacturingAddDefectDetailsFragmentSubcomponent.Factory get(
          ) {
        return new ManufacturingAddDefectDetailsFragmentSubcomponentFactory();
      }
    };
    this.productionDefectRepairFragmentSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeProductionDefectRepairFragment.ProductionDefectRepairFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeProductionDefectRepairFragment.ProductionDefectRepairFragmentSubcomponent.Factory get(
          ) {
        return new ProductionDefectRepairFragmentSubcomponentFactory();
      }
    };
    this.productionRepairFragmentSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeProductionRepairFragment.ProductionRepairFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeProductionRepairFragment.ProductionRepairFragmentSubcomponent.Factory get(
          ) {
        return new ProductionRepairFragmentSubcomponentFactory();
      }
    };
    this.qualityDefectRepairFragmentSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeQualityDefectRepairFragment.QualityDefectRepairFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeQualityDefectRepairFragment.QualityDefectRepairFragmentSubcomponent.Factory get(
          ) {
        return new QualityDefectRepairFragmentSubcomponentFactory();
      }
    };
    this.qualityRepairFragmentSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeQualityRepairFragment.QualityRepairFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeQualityRepairFragment.QualityRepairFragmentSubcomponent.Factory get(
          ) {
        return new QualityRepairFragmentSubcomponentFactory();
      }
    };
    this.randomQualityInceptionFragmentSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeRandomQualityInceptionFragment.RandomQualityInceptionFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeRandomQualityInceptionFragment.RandomQualityInceptionFragmentSubcomponent.Factory get(
          ) {
        return new RandomQualityInceptionFragmentSubcomponentFactory();
      }
    };
    this.productionRejectionFragmentSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeProductionRejectionFragment.ProductionRejectionFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeProductionRejectionFragment.ProductionRejectionFragmentSubcomponent.Factory get(
          ) {
        return new ProductionRejectionFragmentSubcomponentFactory();
      }
    };
    this.qualityDecisionFragmentSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeQualityDecisionFragment.QualityDecisionFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeQualityDecisionFragment.QualityDecisionFragmentSubcomponent.Factory get(
          ) {
        return new QualityDecisionFragmentSubcomponentFactory();
      }
    };
    this.provideGsonProvider = DoubleCheck.provider(RetrofitModule_ProvideGsonFactory.create(retrofitModuleParam));
    this.provideLoggingInterceptorProvider = DoubleCheck.provider(RetrofitModule_ProvideLoggingInterceptorFactory.create(retrofitModuleParam));
    this.provideOkHttpClientProvider = DoubleCheck.provider(RetrofitModule_ProvideOkHttpClientFactory.create(retrofitModuleParam, provideLoggingInterceptorProvider));
    this.getRetrofitInstanceProvider = DoubleCheck.provider(RetrofitModule_GetRetrofitInstanceFactory.create(provideGsonProvider, provideOkHttpClientProvider));
    this.providesAPiInterfaceProvider = DoubleCheck.provider(RetrofitModule_ProvidesAPiInterfaceFactory.create(getRetrofitInstanceProvider));
  }

  @Override
  public void inject(MyApplication arg0) {
    injectMyApplication(arg0);
  }

  private MyApplication injectMyApplication(MyApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements ApplicationComponent.Builder {
    private MyApplication Application;

    @Override
    public Builder Application(MyApplication application) {
      this.Application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(Application, MyApplication.class);
      return new DaggerApplicationComponent(new RetrofitModule(), Application);
    }
  }

  private final class ProductionSequenceSubcomponentFactory implements ActivityBuilderModule_Contributeproductionsequencefragment.ProductionSequenceSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_Contributeproductionsequencefragment.ProductionSequenceSubcomponent create(
        ProductionSequence arg0) {
      Preconditions.checkNotNull(arg0);
      return new ProductionSequenceSubcomponentImpl(arg0);
    }
  }

  private final class ProductionSequenceSubcomponentImpl implements ActivityBuilderModule_Contributeproductionsequencefragment.ProductionSequenceSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private Provider<ManufacturingQualityOperationViewModel> manufacturingQualityOperationViewModelProvider;

    private Provider<ManufacturingAddDefectsViewModel> manufacturingAddDefectsViewModelProvider;

    private Provider<ManufacturingAddDefectsDetailsViewModel> manufacturingAddDefectsDetailsViewModelProvider;

    private Provider<ProductionRepairViewModel> productionRepairViewModelProvider;

    private Provider<ProductionDefectRepairViewModel> productionDefectRepairViewModelProvider;

    private Provider<QualityRepairViewModel> qualityRepairViewModelProvider;

    private Provider<QualityDefectRepairViewModel> qualityDefectRepairViewModelProvider;

    private Provider<RandomQualityInceptionViewModel> randomQualityInceptionViewModelProvider;

    private Provider<ProductionRejectionViewModel> productionRejectionViewModelProvider;

    private Provider<QualityDecisionViewModel> qualityDecisionViewModelProvider;

    private ProductionSequenceSubcomponentImpl(ProductionSequence arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(15).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).put(ManufacturingQualityOperationViewModel.class, (Provider) manufacturingQualityOperationViewModelProvider).put(ManufacturingAddDefectsViewModel.class, (Provider) manufacturingAddDefectsViewModelProvider).put(ManufacturingAddDefectsDetailsViewModel.class, (Provider) manufacturingAddDefectsDetailsViewModelProvider).put(ProductionRepairViewModel.class, (Provider) productionRepairViewModelProvider).put(ProductionDefectRepairViewModel.class, (Provider) productionDefectRepairViewModelProvider).put(QualityRepairViewModel.class, (Provider) qualityRepairViewModelProvider).put(QualityDefectRepairViewModel.class, (Provider) qualityDefectRepairViewModelProvider).put(RandomQualityInceptionViewModel.class, (Provider) randomQualityInceptionViewModelProvider).put(ProductionRejectionViewModel.class, (Provider) productionRejectionViewModelProvider).put(QualityDecisionViewModel.class, (Provider) qualityDecisionViewModelProvider).build();
    }

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductionSequence arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingQualityOperationViewModelProvider = ManufacturingQualityOperationViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsViewModelProvider = ManufacturingAddDefectsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsDetailsViewModelProvider = ManufacturingAddDefectsDetailsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRepairViewModelProvider = ProductionRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionDefectRepairViewModelProvider = ProductionDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityRepairViewModelProvider = QualityRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDefectRepairViewModelProvider = QualityDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.randomQualityInceptionViewModelProvider = RandomQualityInceptionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRejectionViewModelProvider = ProductionRejectionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDecisionViewModelProvider = QualityDecisionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(ProductionSequence arg0) {
      injectProductionSequence(arg0);
    }

    private ProductionSequence injectProductionSequence(ProductionSequence instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      ProductionSequence_MembersInjector.injectProvider(instance, getViewModelProviderFactory());
      ProductionSequence_MembersInjector.injectGson(instance, DaggerApplicationComponent.this.provideGsonProvider.get());
      return instance;
    }
  }

  private final class SigninFragmentSubcomponentFactory implements ActivityBuilderModule_SigninFragment.SigninFragmentSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_SigninFragment.SigninFragmentSubcomponent create(
        SigninFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SigninFragmentSubcomponentImpl(arg0);
    }
  }

  private final class SigninFragmentSubcomponentImpl implements ActivityBuilderModule_SigninFragment.SigninFragmentSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private Provider<ManufacturingQualityOperationViewModel> manufacturingQualityOperationViewModelProvider;

    private Provider<ManufacturingAddDefectsViewModel> manufacturingAddDefectsViewModelProvider;

    private Provider<ManufacturingAddDefectsDetailsViewModel> manufacturingAddDefectsDetailsViewModelProvider;

    private Provider<ProductionRepairViewModel> productionRepairViewModelProvider;

    private Provider<ProductionDefectRepairViewModel> productionDefectRepairViewModelProvider;

    private Provider<QualityRepairViewModel> qualityRepairViewModelProvider;

    private Provider<QualityDefectRepairViewModel> qualityDefectRepairViewModelProvider;

    private Provider<RandomQualityInceptionViewModel> randomQualityInceptionViewModelProvider;

    private Provider<ProductionRejectionViewModel> productionRejectionViewModelProvider;

    private Provider<QualityDecisionViewModel> qualityDecisionViewModelProvider;

    private SigninFragmentSubcomponentImpl(SigninFragment arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(15).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).put(ManufacturingQualityOperationViewModel.class, (Provider) manufacturingQualityOperationViewModelProvider).put(ManufacturingAddDefectsViewModel.class, (Provider) manufacturingAddDefectsViewModelProvider).put(ManufacturingAddDefectsDetailsViewModel.class, (Provider) manufacturingAddDefectsDetailsViewModelProvider).put(ProductionRepairViewModel.class, (Provider) productionRepairViewModelProvider).put(ProductionDefectRepairViewModel.class, (Provider) productionDefectRepairViewModelProvider).put(QualityRepairViewModel.class, (Provider) qualityRepairViewModelProvider).put(QualityDefectRepairViewModel.class, (Provider) qualityDefectRepairViewModelProvider).put(RandomQualityInceptionViewModel.class, (Provider) randomQualityInceptionViewModelProvider).put(ProductionRejectionViewModel.class, (Provider) productionRejectionViewModelProvider).put(QualityDecisionViewModel.class, (Provider) qualityDecisionViewModelProvider).build();
    }

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SigninFragment arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingQualityOperationViewModelProvider = ManufacturingQualityOperationViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsViewModelProvider = ManufacturingAddDefectsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsDetailsViewModelProvider = ManufacturingAddDefectsDetailsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRepairViewModelProvider = ProductionRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionDefectRepairViewModelProvider = ProductionDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityRepairViewModelProvider = QualityRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDefectRepairViewModelProvider = QualityDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.randomQualityInceptionViewModelProvider = RandomQualityInceptionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRejectionViewModelProvider = ProductionRejectionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDecisionViewModelProvider = QualityDecisionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(SigninFragment arg0) {
      injectSigninFragment(arg0);
    }

    private SigninFragment injectSigninFragment(SigninFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      SigninFragment_MembersInjector.injectProviderFactory(instance, getViewModelProviderFactory());
      return instance;
    }
  }

  private final class MachineLoadingFragmentSubcomponentFactory implements ActivityBuilderModule_MachineLoadingFragment.MachineLoadingFragmentSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_MachineLoadingFragment.MachineLoadingFragmentSubcomponent create(
        MachineLoadingFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new MachineLoadingFragmentSubcomponentImpl(arg0);
    }
  }

  private final class MachineLoadingFragmentSubcomponentImpl implements ActivityBuilderModule_MachineLoadingFragment.MachineLoadingFragmentSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private Provider<ManufacturingQualityOperationViewModel> manufacturingQualityOperationViewModelProvider;

    private Provider<ManufacturingAddDefectsViewModel> manufacturingAddDefectsViewModelProvider;

    private Provider<ManufacturingAddDefectsDetailsViewModel> manufacturingAddDefectsDetailsViewModelProvider;

    private Provider<ProductionRepairViewModel> productionRepairViewModelProvider;

    private Provider<ProductionDefectRepairViewModel> productionDefectRepairViewModelProvider;

    private Provider<QualityRepairViewModel> qualityRepairViewModelProvider;

    private Provider<QualityDefectRepairViewModel> qualityDefectRepairViewModelProvider;

    private Provider<RandomQualityInceptionViewModel> randomQualityInceptionViewModelProvider;

    private Provider<ProductionRejectionViewModel> productionRejectionViewModelProvider;

    private Provider<QualityDecisionViewModel> qualityDecisionViewModelProvider;

    private MachineLoadingFragmentSubcomponentImpl(MachineLoadingFragment arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(15).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).put(ManufacturingQualityOperationViewModel.class, (Provider) manufacturingQualityOperationViewModelProvider).put(ManufacturingAddDefectsViewModel.class, (Provider) manufacturingAddDefectsViewModelProvider).put(ManufacturingAddDefectsDetailsViewModel.class, (Provider) manufacturingAddDefectsDetailsViewModelProvider).put(ProductionRepairViewModel.class, (Provider) productionRepairViewModelProvider).put(ProductionDefectRepairViewModel.class, (Provider) productionDefectRepairViewModelProvider).put(QualityRepairViewModel.class, (Provider) qualityRepairViewModelProvider).put(QualityDefectRepairViewModel.class, (Provider) qualityDefectRepairViewModelProvider).put(RandomQualityInceptionViewModel.class, (Provider) randomQualityInceptionViewModelProvider).put(ProductionRejectionViewModel.class, (Provider) productionRejectionViewModelProvider).put(QualityDecisionViewModel.class, (Provider) qualityDecisionViewModelProvider).build();
    }

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MachineLoadingFragment arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingQualityOperationViewModelProvider = ManufacturingQualityOperationViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsViewModelProvider = ManufacturingAddDefectsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsDetailsViewModelProvider = ManufacturingAddDefectsDetailsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRepairViewModelProvider = ProductionRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionDefectRepairViewModelProvider = ProductionDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityRepairViewModelProvider = QualityRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDefectRepairViewModelProvider = QualityDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.randomQualityInceptionViewModelProvider = RandomQualityInceptionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRejectionViewModelProvider = ProductionRejectionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDecisionViewModelProvider = QualityDecisionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(MachineLoadingFragment arg0) {
      injectMachineLoadingFragment(arg0);
    }

    private MachineLoadingFragment injectMachineLoadingFragment(MachineLoadingFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      MachineLoadingFragment_MembersInjector.injectProviderFactory(instance, getViewModelProviderFactory());
      return instance;
    }
  }

  private final class ProductionSignoffFragmentSubcomponentFactory implements ActivityBuilderModule_ProductionSignoffFragment.ProductionSignoffFragmentSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ProductionSignoffFragment.ProductionSignoffFragmentSubcomponent create(
        ProductionSignoffFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new ProductionSignoffFragmentSubcomponentImpl(arg0);
    }
  }

  private final class ProductionSignoffFragmentSubcomponentImpl implements ActivityBuilderModule_ProductionSignoffFragment.ProductionSignoffFragmentSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private Provider<ManufacturingQualityOperationViewModel> manufacturingQualityOperationViewModelProvider;

    private Provider<ManufacturingAddDefectsViewModel> manufacturingAddDefectsViewModelProvider;

    private Provider<ManufacturingAddDefectsDetailsViewModel> manufacturingAddDefectsDetailsViewModelProvider;

    private Provider<ProductionRepairViewModel> productionRepairViewModelProvider;

    private Provider<ProductionDefectRepairViewModel> productionDefectRepairViewModelProvider;

    private Provider<QualityRepairViewModel> qualityRepairViewModelProvider;

    private Provider<QualityDefectRepairViewModel> qualityDefectRepairViewModelProvider;

    private Provider<RandomQualityInceptionViewModel> randomQualityInceptionViewModelProvider;

    private Provider<ProductionRejectionViewModel> productionRejectionViewModelProvider;

    private Provider<QualityDecisionViewModel> qualityDecisionViewModelProvider;

    private ProductionSignoffFragmentSubcomponentImpl(ProductionSignoffFragment arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(15).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).put(ManufacturingQualityOperationViewModel.class, (Provider) manufacturingQualityOperationViewModelProvider).put(ManufacturingAddDefectsViewModel.class, (Provider) manufacturingAddDefectsViewModelProvider).put(ManufacturingAddDefectsDetailsViewModel.class, (Provider) manufacturingAddDefectsDetailsViewModelProvider).put(ProductionRepairViewModel.class, (Provider) productionRepairViewModelProvider).put(ProductionDefectRepairViewModel.class, (Provider) productionDefectRepairViewModelProvider).put(QualityRepairViewModel.class, (Provider) qualityRepairViewModelProvider).put(QualityDefectRepairViewModel.class, (Provider) qualityDefectRepairViewModelProvider).put(RandomQualityInceptionViewModel.class, (Provider) randomQualityInceptionViewModelProvider).put(ProductionRejectionViewModel.class, (Provider) productionRejectionViewModelProvider).put(QualityDecisionViewModel.class, (Provider) qualityDecisionViewModelProvider).build();
    }

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductionSignoffFragment arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingQualityOperationViewModelProvider = ManufacturingQualityOperationViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsViewModelProvider = ManufacturingAddDefectsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsDetailsViewModelProvider = ManufacturingAddDefectsDetailsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRepairViewModelProvider = ProductionRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionDefectRepairViewModelProvider = ProductionDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityRepairViewModelProvider = QualityRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDefectRepairViewModelProvider = QualityDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.randomQualityInceptionViewModelProvider = RandomQualityInceptionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRejectionViewModelProvider = ProductionRejectionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDecisionViewModelProvider = QualityDecisionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(ProductionSignoffFragment arg0) {
      injectProductionSignoffFragment(arg0);
    }

    private ProductionSignoffFragment injectProductionSignoffFragment(
        ProductionSignoffFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      ProductionSignoffFragment_MembersInjector.injectProviderFactory(instance, getViewModelProviderFactory());
      return instance;
    }
  }

  private final class ManufacturingQualityOperationFragmentSubcomponentFactory implements ActivityBuilderModule_ContributeQualityManufacturingOperationFragment.ManufacturingQualityOperationFragmentSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ContributeQualityManufacturingOperationFragment.ManufacturingQualityOperationFragmentSubcomponent create(
        ManufacturingQualityOperationFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new ManufacturingQualityOperationFragmentSubcomponentImpl(arg0);
    }
  }

  private final class ManufacturingQualityOperationFragmentSubcomponentImpl implements ActivityBuilderModule_ContributeQualityManufacturingOperationFragment.ManufacturingQualityOperationFragmentSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private Provider<ManufacturingQualityOperationViewModel> manufacturingQualityOperationViewModelProvider;

    private Provider<ManufacturingAddDefectsViewModel> manufacturingAddDefectsViewModelProvider;

    private Provider<ManufacturingAddDefectsDetailsViewModel> manufacturingAddDefectsDetailsViewModelProvider;

    private Provider<ProductionRepairViewModel> productionRepairViewModelProvider;

    private Provider<ProductionDefectRepairViewModel> productionDefectRepairViewModelProvider;

    private Provider<QualityRepairViewModel> qualityRepairViewModelProvider;

    private Provider<QualityDefectRepairViewModel> qualityDefectRepairViewModelProvider;

    private Provider<RandomQualityInceptionViewModel> randomQualityInceptionViewModelProvider;

    private Provider<ProductionRejectionViewModel> productionRejectionViewModelProvider;

    private Provider<QualityDecisionViewModel> qualityDecisionViewModelProvider;

    private ManufacturingQualityOperationFragmentSubcomponentImpl(
        ManufacturingQualityOperationFragment arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(15).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).put(ManufacturingQualityOperationViewModel.class, (Provider) manufacturingQualityOperationViewModelProvider).put(ManufacturingAddDefectsViewModel.class, (Provider) manufacturingAddDefectsViewModelProvider).put(ManufacturingAddDefectsDetailsViewModel.class, (Provider) manufacturingAddDefectsDetailsViewModelProvider).put(ProductionRepairViewModel.class, (Provider) productionRepairViewModelProvider).put(ProductionDefectRepairViewModel.class, (Provider) productionDefectRepairViewModelProvider).put(QualityRepairViewModel.class, (Provider) qualityRepairViewModelProvider).put(QualityDefectRepairViewModel.class, (Provider) qualityDefectRepairViewModelProvider).put(RandomQualityInceptionViewModel.class, (Provider) randomQualityInceptionViewModelProvider).put(ProductionRejectionViewModel.class, (Provider) productionRejectionViewModelProvider).put(QualityDecisionViewModel.class, (Provider) qualityDecisionViewModelProvider).build();
    }

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ManufacturingQualityOperationFragment arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingQualityOperationViewModelProvider = ManufacturingQualityOperationViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsViewModelProvider = ManufacturingAddDefectsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsDetailsViewModelProvider = ManufacturingAddDefectsDetailsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRepairViewModelProvider = ProductionRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionDefectRepairViewModelProvider = ProductionDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityRepairViewModelProvider = QualityRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDefectRepairViewModelProvider = QualityDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.randomQualityInceptionViewModelProvider = RandomQualityInceptionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRejectionViewModelProvider = ProductionRejectionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDecisionViewModelProvider = QualityDecisionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(ManufacturingQualityOperationFragment arg0) {
      injectManufacturingQualityOperationFragment(arg0);
    }

    private ManufacturingQualityOperationFragment injectManufacturingQualityOperationFragment(
        ManufacturingQualityOperationFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      ManufacturingQualityOperationFragment_MembersInjector.injectProvider(instance, getViewModelProviderFactory());
      ManufacturingQualityOperationFragment_MembersInjector.injectGson(instance, DaggerApplicationComponent.this.provideGsonProvider.get());
      return instance;
    }
  }

  private final class ManufacturingAddDefectsFragmentSubcomponentFactory implements ActivityBuilderModule_ContributeManufacturingAddDefectsFragment.ManufacturingAddDefectsFragmentSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ContributeManufacturingAddDefectsFragment.ManufacturingAddDefectsFragmentSubcomponent create(
        ManufacturingAddDefectsFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new ManufacturingAddDefectsFragmentSubcomponentImpl(arg0);
    }
  }

  private final class ManufacturingAddDefectsFragmentSubcomponentImpl implements ActivityBuilderModule_ContributeManufacturingAddDefectsFragment.ManufacturingAddDefectsFragmentSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private Provider<ManufacturingQualityOperationViewModel> manufacturingQualityOperationViewModelProvider;

    private Provider<ManufacturingAddDefectsViewModel> manufacturingAddDefectsViewModelProvider;

    private Provider<ManufacturingAddDefectsDetailsViewModel> manufacturingAddDefectsDetailsViewModelProvider;

    private Provider<ProductionRepairViewModel> productionRepairViewModelProvider;

    private Provider<ProductionDefectRepairViewModel> productionDefectRepairViewModelProvider;

    private Provider<QualityRepairViewModel> qualityRepairViewModelProvider;

    private Provider<QualityDefectRepairViewModel> qualityDefectRepairViewModelProvider;

    private Provider<RandomQualityInceptionViewModel> randomQualityInceptionViewModelProvider;

    private Provider<ProductionRejectionViewModel> productionRejectionViewModelProvider;

    private Provider<QualityDecisionViewModel> qualityDecisionViewModelProvider;

    private ManufacturingAddDefectsFragmentSubcomponentImpl(ManufacturingAddDefectsFragment arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(15).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).put(ManufacturingQualityOperationViewModel.class, (Provider) manufacturingQualityOperationViewModelProvider).put(ManufacturingAddDefectsViewModel.class, (Provider) manufacturingAddDefectsViewModelProvider).put(ManufacturingAddDefectsDetailsViewModel.class, (Provider) manufacturingAddDefectsDetailsViewModelProvider).put(ProductionRepairViewModel.class, (Provider) productionRepairViewModelProvider).put(ProductionDefectRepairViewModel.class, (Provider) productionDefectRepairViewModelProvider).put(QualityRepairViewModel.class, (Provider) qualityRepairViewModelProvider).put(QualityDefectRepairViewModel.class, (Provider) qualityDefectRepairViewModelProvider).put(RandomQualityInceptionViewModel.class, (Provider) randomQualityInceptionViewModelProvider).put(ProductionRejectionViewModel.class, (Provider) productionRejectionViewModelProvider).put(QualityDecisionViewModel.class, (Provider) qualityDecisionViewModelProvider).build();
    }

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ManufacturingAddDefectsFragment arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingQualityOperationViewModelProvider = ManufacturingQualityOperationViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsViewModelProvider = ManufacturingAddDefectsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsDetailsViewModelProvider = ManufacturingAddDefectsDetailsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRepairViewModelProvider = ProductionRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionDefectRepairViewModelProvider = ProductionDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityRepairViewModelProvider = QualityRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDefectRepairViewModelProvider = QualityDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.randomQualityInceptionViewModelProvider = RandomQualityInceptionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRejectionViewModelProvider = ProductionRejectionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDecisionViewModelProvider = QualityDecisionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(ManufacturingAddDefectsFragment arg0) {
      injectManufacturingAddDefectsFragment(arg0);
    }

    private ManufacturingAddDefectsFragment injectManufacturingAddDefectsFragment(
        ManufacturingAddDefectsFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      ManufacturingAddDefectsFragment_MembersInjector.injectProvider(instance, getViewModelProviderFactory());
      return instance;
    }
  }

  private final class ManufacturingAddDefectDetailsFragmentSubcomponentFactory implements ActivityBuilderModule_ContributeManufacturingAddDefectDetailsFragment.ManufacturingAddDefectDetailsFragmentSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ContributeManufacturingAddDefectDetailsFragment.ManufacturingAddDefectDetailsFragmentSubcomponent create(
        ManufacturingAddDefectDetailsFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new ManufacturingAddDefectDetailsFragmentSubcomponentImpl(arg0);
    }
  }

  private final class ManufacturingAddDefectDetailsFragmentSubcomponentImpl implements ActivityBuilderModule_ContributeManufacturingAddDefectDetailsFragment.ManufacturingAddDefectDetailsFragmentSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private Provider<ManufacturingQualityOperationViewModel> manufacturingQualityOperationViewModelProvider;

    private Provider<ManufacturingAddDefectsViewModel> manufacturingAddDefectsViewModelProvider;

    private Provider<ManufacturingAddDefectsDetailsViewModel> manufacturingAddDefectsDetailsViewModelProvider;

    private Provider<ProductionRepairViewModel> productionRepairViewModelProvider;

    private Provider<ProductionDefectRepairViewModel> productionDefectRepairViewModelProvider;

    private Provider<QualityRepairViewModel> qualityRepairViewModelProvider;

    private Provider<QualityDefectRepairViewModel> qualityDefectRepairViewModelProvider;

    private Provider<RandomQualityInceptionViewModel> randomQualityInceptionViewModelProvider;

    private Provider<ProductionRejectionViewModel> productionRejectionViewModelProvider;

    private Provider<QualityDecisionViewModel> qualityDecisionViewModelProvider;

    private ManufacturingAddDefectDetailsFragmentSubcomponentImpl(
        ManufacturingAddDefectDetailsFragment arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(15).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).put(ManufacturingQualityOperationViewModel.class, (Provider) manufacturingQualityOperationViewModelProvider).put(ManufacturingAddDefectsViewModel.class, (Provider) manufacturingAddDefectsViewModelProvider).put(ManufacturingAddDefectsDetailsViewModel.class, (Provider) manufacturingAddDefectsDetailsViewModelProvider).put(ProductionRepairViewModel.class, (Provider) productionRepairViewModelProvider).put(ProductionDefectRepairViewModel.class, (Provider) productionDefectRepairViewModelProvider).put(QualityRepairViewModel.class, (Provider) qualityRepairViewModelProvider).put(QualityDefectRepairViewModel.class, (Provider) qualityDefectRepairViewModelProvider).put(RandomQualityInceptionViewModel.class, (Provider) randomQualityInceptionViewModelProvider).put(ProductionRejectionViewModel.class, (Provider) productionRejectionViewModelProvider).put(QualityDecisionViewModel.class, (Provider) qualityDecisionViewModelProvider).build();
    }

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ManufacturingAddDefectDetailsFragment arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingQualityOperationViewModelProvider = ManufacturingQualityOperationViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsViewModelProvider = ManufacturingAddDefectsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsDetailsViewModelProvider = ManufacturingAddDefectsDetailsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRepairViewModelProvider = ProductionRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionDefectRepairViewModelProvider = ProductionDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityRepairViewModelProvider = QualityRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDefectRepairViewModelProvider = QualityDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.randomQualityInceptionViewModelProvider = RandomQualityInceptionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRejectionViewModelProvider = ProductionRejectionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDecisionViewModelProvider = QualityDecisionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(ManufacturingAddDefectDetailsFragment arg0) {
      injectManufacturingAddDefectDetailsFragment(arg0);
    }

    private ManufacturingAddDefectDetailsFragment injectManufacturingAddDefectDetailsFragment(
        ManufacturingAddDefectDetailsFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      ManufacturingAddDefectDetailsFragment_MembersInjector.injectProvider(instance, getViewModelProviderFactory());
      return instance;
    }
  }

  private final class ProductionDefectRepairFragmentSubcomponentFactory implements ActivityBuilderModule_ContributeProductionDefectRepairFragment.ProductionDefectRepairFragmentSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ContributeProductionDefectRepairFragment.ProductionDefectRepairFragmentSubcomponent create(
        ProductionDefectRepairFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new ProductionDefectRepairFragmentSubcomponentImpl(arg0);
    }
  }

  private final class ProductionDefectRepairFragmentSubcomponentImpl implements ActivityBuilderModule_ContributeProductionDefectRepairFragment.ProductionDefectRepairFragmentSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private Provider<ManufacturingQualityOperationViewModel> manufacturingQualityOperationViewModelProvider;

    private Provider<ManufacturingAddDefectsViewModel> manufacturingAddDefectsViewModelProvider;

    private Provider<ManufacturingAddDefectsDetailsViewModel> manufacturingAddDefectsDetailsViewModelProvider;

    private Provider<ProductionRepairViewModel> productionRepairViewModelProvider;

    private Provider<ProductionDefectRepairViewModel> productionDefectRepairViewModelProvider;

    private Provider<QualityRepairViewModel> qualityRepairViewModelProvider;

    private Provider<QualityDefectRepairViewModel> qualityDefectRepairViewModelProvider;

    private Provider<RandomQualityInceptionViewModel> randomQualityInceptionViewModelProvider;

    private Provider<ProductionRejectionViewModel> productionRejectionViewModelProvider;

    private Provider<QualityDecisionViewModel> qualityDecisionViewModelProvider;

    private ProductionDefectRepairFragmentSubcomponentImpl(ProductionDefectRepairFragment arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(15).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).put(ManufacturingQualityOperationViewModel.class, (Provider) manufacturingQualityOperationViewModelProvider).put(ManufacturingAddDefectsViewModel.class, (Provider) manufacturingAddDefectsViewModelProvider).put(ManufacturingAddDefectsDetailsViewModel.class, (Provider) manufacturingAddDefectsDetailsViewModelProvider).put(ProductionRepairViewModel.class, (Provider) productionRepairViewModelProvider).put(ProductionDefectRepairViewModel.class, (Provider) productionDefectRepairViewModelProvider).put(QualityRepairViewModel.class, (Provider) qualityRepairViewModelProvider).put(QualityDefectRepairViewModel.class, (Provider) qualityDefectRepairViewModelProvider).put(RandomQualityInceptionViewModel.class, (Provider) randomQualityInceptionViewModelProvider).put(ProductionRejectionViewModel.class, (Provider) productionRejectionViewModelProvider).put(QualityDecisionViewModel.class, (Provider) qualityDecisionViewModelProvider).build();
    }

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductionDefectRepairFragment arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingQualityOperationViewModelProvider = ManufacturingQualityOperationViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsViewModelProvider = ManufacturingAddDefectsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsDetailsViewModelProvider = ManufacturingAddDefectsDetailsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRepairViewModelProvider = ProductionRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionDefectRepairViewModelProvider = ProductionDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityRepairViewModelProvider = QualityRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDefectRepairViewModelProvider = QualityDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.randomQualityInceptionViewModelProvider = RandomQualityInceptionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRejectionViewModelProvider = ProductionRejectionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDecisionViewModelProvider = QualityDecisionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(ProductionDefectRepairFragment arg0) {
      injectProductionDefectRepairFragment(arg0);
    }

    private ProductionDefectRepairFragment injectProductionDefectRepairFragment(
        ProductionDefectRepairFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      ProductionDefectRepairFragment_MembersInjector.injectProvider(instance, getViewModelProviderFactory());
      return instance;
    }
  }

  private final class ProductionRepairFragmentSubcomponentFactory implements ActivityBuilderModule_ContributeProductionRepairFragment.ProductionRepairFragmentSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ContributeProductionRepairFragment.ProductionRepairFragmentSubcomponent create(
        ProductionRepairFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new ProductionRepairFragmentSubcomponentImpl(arg0);
    }
  }

  private final class ProductionRepairFragmentSubcomponentImpl implements ActivityBuilderModule_ContributeProductionRepairFragment.ProductionRepairFragmentSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private Provider<ManufacturingQualityOperationViewModel> manufacturingQualityOperationViewModelProvider;

    private Provider<ManufacturingAddDefectsViewModel> manufacturingAddDefectsViewModelProvider;

    private Provider<ManufacturingAddDefectsDetailsViewModel> manufacturingAddDefectsDetailsViewModelProvider;

    private Provider<ProductionRepairViewModel> productionRepairViewModelProvider;

    private Provider<ProductionDefectRepairViewModel> productionDefectRepairViewModelProvider;

    private Provider<QualityRepairViewModel> qualityRepairViewModelProvider;

    private Provider<QualityDefectRepairViewModel> qualityDefectRepairViewModelProvider;

    private Provider<RandomQualityInceptionViewModel> randomQualityInceptionViewModelProvider;

    private Provider<ProductionRejectionViewModel> productionRejectionViewModelProvider;

    private Provider<QualityDecisionViewModel> qualityDecisionViewModelProvider;

    private ProductionRepairFragmentSubcomponentImpl(ProductionRepairFragment arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(15).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).put(ManufacturingQualityOperationViewModel.class, (Provider) manufacturingQualityOperationViewModelProvider).put(ManufacturingAddDefectsViewModel.class, (Provider) manufacturingAddDefectsViewModelProvider).put(ManufacturingAddDefectsDetailsViewModel.class, (Provider) manufacturingAddDefectsDetailsViewModelProvider).put(ProductionRepairViewModel.class, (Provider) productionRepairViewModelProvider).put(ProductionDefectRepairViewModel.class, (Provider) productionDefectRepairViewModelProvider).put(QualityRepairViewModel.class, (Provider) qualityRepairViewModelProvider).put(QualityDefectRepairViewModel.class, (Provider) qualityDefectRepairViewModelProvider).put(RandomQualityInceptionViewModel.class, (Provider) randomQualityInceptionViewModelProvider).put(ProductionRejectionViewModel.class, (Provider) productionRejectionViewModelProvider).put(QualityDecisionViewModel.class, (Provider) qualityDecisionViewModelProvider).build();
    }

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductionRepairFragment arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingQualityOperationViewModelProvider = ManufacturingQualityOperationViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsViewModelProvider = ManufacturingAddDefectsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsDetailsViewModelProvider = ManufacturingAddDefectsDetailsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRepairViewModelProvider = ProductionRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionDefectRepairViewModelProvider = ProductionDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityRepairViewModelProvider = QualityRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDefectRepairViewModelProvider = QualityDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.randomQualityInceptionViewModelProvider = RandomQualityInceptionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRejectionViewModelProvider = ProductionRejectionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDecisionViewModelProvider = QualityDecisionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(ProductionRepairFragment arg0) {
      injectProductionRepairFragment(arg0);
    }

    private ProductionRepairFragment injectProductionRepairFragment(
        ProductionRepairFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      ProductionRepairFragment_MembersInjector.injectProvider(instance, getViewModelProviderFactory());
      return instance;
    }
  }

  private final class QualityDefectRepairFragmentSubcomponentFactory implements ActivityBuilderModule_ContributeQualityDefectRepairFragment.QualityDefectRepairFragmentSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ContributeQualityDefectRepairFragment.QualityDefectRepairFragmentSubcomponent create(
        QualityDefectRepairFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new QualityDefectRepairFragmentSubcomponentImpl(arg0);
    }
  }

  private final class QualityDefectRepairFragmentSubcomponentImpl implements ActivityBuilderModule_ContributeQualityDefectRepairFragment.QualityDefectRepairFragmentSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private Provider<ManufacturingQualityOperationViewModel> manufacturingQualityOperationViewModelProvider;

    private Provider<ManufacturingAddDefectsViewModel> manufacturingAddDefectsViewModelProvider;

    private Provider<ManufacturingAddDefectsDetailsViewModel> manufacturingAddDefectsDetailsViewModelProvider;

    private Provider<ProductionRepairViewModel> productionRepairViewModelProvider;

    private Provider<ProductionDefectRepairViewModel> productionDefectRepairViewModelProvider;

    private Provider<QualityRepairViewModel> qualityRepairViewModelProvider;

    private Provider<QualityDefectRepairViewModel> qualityDefectRepairViewModelProvider;

    private Provider<RandomQualityInceptionViewModel> randomQualityInceptionViewModelProvider;

    private Provider<ProductionRejectionViewModel> productionRejectionViewModelProvider;

    private Provider<QualityDecisionViewModel> qualityDecisionViewModelProvider;

    private QualityDefectRepairFragmentSubcomponentImpl(QualityDefectRepairFragment arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(15).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).put(ManufacturingQualityOperationViewModel.class, (Provider) manufacturingQualityOperationViewModelProvider).put(ManufacturingAddDefectsViewModel.class, (Provider) manufacturingAddDefectsViewModelProvider).put(ManufacturingAddDefectsDetailsViewModel.class, (Provider) manufacturingAddDefectsDetailsViewModelProvider).put(ProductionRepairViewModel.class, (Provider) productionRepairViewModelProvider).put(ProductionDefectRepairViewModel.class, (Provider) productionDefectRepairViewModelProvider).put(QualityRepairViewModel.class, (Provider) qualityRepairViewModelProvider).put(QualityDefectRepairViewModel.class, (Provider) qualityDefectRepairViewModelProvider).put(RandomQualityInceptionViewModel.class, (Provider) randomQualityInceptionViewModelProvider).put(ProductionRejectionViewModel.class, (Provider) productionRejectionViewModelProvider).put(QualityDecisionViewModel.class, (Provider) qualityDecisionViewModelProvider).build();
    }

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final QualityDefectRepairFragment arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingQualityOperationViewModelProvider = ManufacturingQualityOperationViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsViewModelProvider = ManufacturingAddDefectsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsDetailsViewModelProvider = ManufacturingAddDefectsDetailsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRepairViewModelProvider = ProductionRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionDefectRepairViewModelProvider = ProductionDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityRepairViewModelProvider = QualityRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDefectRepairViewModelProvider = QualityDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.randomQualityInceptionViewModelProvider = RandomQualityInceptionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRejectionViewModelProvider = ProductionRejectionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDecisionViewModelProvider = QualityDecisionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(QualityDefectRepairFragment arg0) {
      injectQualityDefectRepairFragment(arg0);
    }

    private QualityDefectRepairFragment injectQualityDefectRepairFragment(
        QualityDefectRepairFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      QualityDefectRepairFragment_MembersInjector.injectProvider(instance, getViewModelProviderFactory());
      return instance;
    }
  }

  private final class QualityRepairFragmentSubcomponentFactory implements ActivityBuilderModule_ContributeQualityRepairFragment.QualityRepairFragmentSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ContributeQualityRepairFragment.QualityRepairFragmentSubcomponent create(
        QualityRepairFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new QualityRepairFragmentSubcomponentImpl(arg0);
    }
  }

  private final class QualityRepairFragmentSubcomponentImpl implements ActivityBuilderModule_ContributeQualityRepairFragment.QualityRepairFragmentSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private Provider<ManufacturingQualityOperationViewModel> manufacturingQualityOperationViewModelProvider;

    private Provider<ManufacturingAddDefectsViewModel> manufacturingAddDefectsViewModelProvider;

    private Provider<ManufacturingAddDefectsDetailsViewModel> manufacturingAddDefectsDetailsViewModelProvider;

    private Provider<ProductionRepairViewModel> productionRepairViewModelProvider;

    private Provider<ProductionDefectRepairViewModel> productionDefectRepairViewModelProvider;

    private Provider<QualityRepairViewModel> qualityRepairViewModelProvider;

    private Provider<QualityDefectRepairViewModel> qualityDefectRepairViewModelProvider;

    private Provider<RandomQualityInceptionViewModel> randomQualityInceptionViewModelProvider;

    private Provider<ProductionRejectionViewModel> productionRejectionViewModelProvider;

    private Provider<QualityDecisionViewModel> qualityDecisionViewModelProvider;

    private QualityRepairFragmentSubcomponentImpl(QualityRepairFragment arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(15).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).put(ManufacturingQualityOperationViewModel.class, (Provider) manufacturingQualityOperationViewModelProvider).put(ManufacturingAddDefectsViewModel.class, (Provider) manufacturingAddDefectsViewModelProvider).put(ManufacturingAddDefectsDetailsViewModel.class, (Provider) manufacturingAddDefectsDetailsViewModelProvider).put(ProductionRepairViewModel.class, (Provider) productionRepairViewModelProvider).put(ProductionDefectRepairViewModel.class, (Provider) productionDefectRepairViewModelProvider).put(QualityRepairViewModel.class, (Provider) qualityRepairViewModelProvider).put(QualityDefectRepairViewModel.class, (Provider) qualityDefectRepairViewModelProvider).put(RandomQualityInceptionViewModel.class, (Provider) randomQualityInceptionViewModelProvider).put(ProductionRejectionViewModel.class, (Provider) productionRejectionViewModelProvider).put(QualityDecisionViewModel.class, (Provider) qualityDecisionViewModelProvider).build();
    }

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final QualityRepairFragment arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingQualityOperationViewModelProvider = ManufacturingQualityOperationViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsViewModelProvider = ManufacturingAddDefectsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsDetailsViewModelProvider = ManufacturingAddDefectsDetailsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRepairViewModelProvider = ProductionRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionDefectRepairViewModelProvider = ProductionDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityRepairViewModelProvider = QualityRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDefectRepairViewModelProvider = QualityDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.randomQualityInceptionViewModelProvider = RandomQualityInceptionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRejectionViewModelProvider = ProductionRejectionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDecisionViewModelProvider = QualityDecisionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(QualityRepairFragment arg0) {
      injectQualityRepairFragment(arg0);
    }

    private QualityRepairFragment injectQualityRepairFragment(QualityRepairFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      QualityRepairFragment_MembersInjector.injectProvider(instance, getViewModelProviderFactory());
      return instance;
    }
  }

  private final class RandomQualityInceptionFragmentSubcomponentFactory implements ActivityBuilderModule_ContributeRandomQualityInceptionFragment.RandomQualityInceptionFragmentSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ContributeRandomQualityInceptionFragment.RandomQualityInceptionFragmentSubcomponent create(
        RandomQualityInceptionFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new RandomQualityInceptionFragmentSubcomponentImpl(arg0);
    }
  }

  private final class RandomQualityInceptionFragmentSubcomponentImpl implements ActivityBuilderModule_ContributeRandomQualityInceptionFragment.RandomQualityInceptionFragmentSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private Provider<ManufacturingQualityOperationViewModel> manufacturingQualityOperationViewModelProvider;

    private Provider<ManufacturingAddDefectsViewModel> manufacturingAddDefectsViewModelProvider;

    private Provider<ManufacturingAddDefectsDetailsViewModel> manufacturingAddDefectsDetailsViewModelProvider;

    private Provider<ProductionRepairViewModel> productionRepairViewModelProvider;

    private Provider<ProductionDefectRepairViewModel> productionDefectRepairViewModelProvider;

    private Provider<QualityRepairViewModel> qualityRepairViewModelProvider;

    private Provider<QualityDefectRepairViewModel> qualityDefectRepairViewModelProvider;

    private Provider<RandomQualityInceptionViewModel> randomQualityInceptionViewModelProvider;

    private Provider<ProductionRejectionViewModel> productionRejectionViewModelProvider;

    private Provider<QualityDecisionViewModel> qualityDecisionViewModelProvider;

    private RandomQualityInceptionFragmentSubcomponentImpl(RandomQualityInceptionFragment arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(15).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).put(ManufacturingQualityOperationViewModel.class, (Provider) manufacturingQualityOperationViewModelProvider).put(ManufacturingAddDefectsViewModel.class, (Provider) manufacturingAddDefectsViewModelProvider).put(ManufacturingAddDefectsDetailsViewModel.class, (Provider) manufacturingAddDefectsDetailsViewModelProvider).put(ProductionRepairViewModel.class, (Provider) productionRepairViewModelProvider).put(ProductionDefectRepairViewModel.class, (Provider) productionDefectRepairViewModelProvider).put(QualityRepairViewModel.class, (Provider) qualityRepairViewModelProvider).put(QualityDefectRepairViewModel.class, (Provider) qualityDefectRepairViewModelProvider).put(RandomQualityInceptionViewModel.class, (Provider) randomQualityInceptionViewModelProvider).put(ProductionRejectionViewModel.class, (Provider) productionRejectionViewModelProvider).put(QualityDecisionViewModel.class, (Provider) qualityDecisionViewModelProvider).build();
    }

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final RandomQualityInceptionFragment arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingQualityOperationViewModelProvider = ManufacturingQualityOperationViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsViewModelProvider = ManufacturingAddDefectsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsDetailsViewModelProvider = ManufacturingAddDefectsDetailsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRepairViewModelProvider = ProductionRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionDefectRepairViewModelProvider = ProductionDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityRepairViewModelProvider = QualityRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDefectRepairViewModelProvider = QualityDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.randomQualityInceptionViewModelProvider = RandomQualityInceptionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRejectionViewModelProvider = ProductionRejectionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDecisionViewModelProvider = QualityDecisionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(RandomQualityInceptionFragment arg0) {
      injectRandomQualityInceptionFragment(arg0);
    }

    private RandomQualityInceptionFragment injectRandomQualityInceptionFragment(
        RandomQualityInceptionFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      RandomQualityInceptionFragment_MembersInjector.injectProvider(instance, getViewModelProviderFactory());
      return instance;
    }
  }

  private final class ProductionRejectionFragmentSubcomponentFactory implements ActivityBuilderModule_ContributeProductionRejectionFragment.ProductionRejectionFragmentSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ContributeProductionRejectionFragment.ProductionRejectionFragmentSubcomponent create(
        ProductionRejectionFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new ProductionRejectionFragmentSubcomponentImpl(arg0);
    }
  }

  private final class ProductionRejectionFragmentSubcomponentImpl implements ActivityBuilderModule_ContributeProductionRejectionFragment.ProductionRejectionFragmentSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private Provider<ManufacturingQualityOperationViewModel> manufacturingQualityOperationViewModelProvider;

    private Provider<ManufacturingAddDefectsViewModel> manufacturingAddDefectsViewModelProvider;

    private Provider<ManufacturingAddDefectsDetailsViewModel> manufacturingAddDefectsDetailsViewModelProvider;

    private Provider<ProductionRepairViewModel> productionRepairViewModelProvider;

    private Provider<ProductionDefectRepairViewModel> productionDefectRepairViewModelProvider;

    private Provider<QualityRepairViewModel> qualityRepairViewModelProvider;

    private Provider<QualityDefectRepairViewModel> qualityDefectRepairViewModelProvider;

    private Provider<RandomQualityInceptionViewModel> randomQualityInceptionViewModelProvider;

    private Provider<ProductionRejectionViewModel> productionRejectionViewModelProvider;

    private Provider<QualityDecisionViewModel> qualityDecisionViewModelProvider;

    private ProductionRejectionFragmentSubcomponentImpl(ProductionRejectionFragment arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(15).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).put(ManufacturingQualityOperationViewModel.class, (Provider) manufacturingQualityOperationViewModelProvider).put(ManufacturingAddDefectsViewModel.class, (Provider) manufacturingAddDefectsViewModelProvider).put(ManufacturingAddDefectsDetailsViewModel.class, (Provider) manufacturingAddDefectsDetailsViewModelProvider).put(ProductionRepairViewModel.class, (Provider) productionRepairViewModelProvider).put(ProductionDefectRepairViewModel.class, (Provider) productionDefectRepairViewModelProvider).put(QualityRepairViewModel.class, (Provider) qualityRepairViewModelProvider).put(QualityDefectRepairViewModel.class, (Provider) qualityDefectRepairViewModelProvider).put(RandomQualityInceptionViewModel.class, (Provider) randomQualityInceptionViewModelProvider).put(ProductionRejectionViewModel.class, (Provider) productionRejectionViewModelProvider).put(QualityDecisionViewModel.class, (Provider) qualityDecisionViewModelProvider).build();
    }

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductionRejectionFragment arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingQualityOperationViewModelProvider = ManufacturingQualityOperationViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsViewModelProvider = ManufacturingAddDefectsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsDetailsViewModelProvider = ManufacturingAddDefectsDetailsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRepairViewModelProvider = ProductionRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionDefectRepairViewModelProvider = ProductionDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityRepairViewModelProvider = QualityRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDefectRepairViewModelProvider = QualityDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.randomQualityInceptionViewModelProvider = RandomQualityInceptionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRejectionViewModelProvider = ProductionRejectionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDecisionViewModelProvider = QualityDecisionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(ProductionRejectionFragment arg0) {
      injectProductionRejectionFragment(arg0);
    }

    private ProductionRejectionFragment injectProductionRejectionFragment(
        ProductionRejectionFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      ProductionRejectionFragment_MembersInjector.injectProvider(instance, getViewModelProviderFactory());
      return instance;
    }
  }

  private final class QualityDecisionFragmentSubcomponentFactory implements ActivityBuilderModule_ContributeQualityDecisionFragment.QualityDecisionFragmentSubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ContributeQualityDecisionFragment.QualityDecisionFragmentSubcomponent create(
        QualityDecisionFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new QualityDecisionFragmentSubcomponentImpl(arg0);
    }
  }

  private final class QualityDecisionFragmentSubcomponentImpl implements ActivityBuilderModule_ContributeQualityDecisionFragment.QualityDecisionFragmentSubcomponent {
    private Provider<ProductionsequenceViewModel> productionsequenceViewModelProvider;

    private Provider<Authenticationrepository> authenticationrepositoryProvider;

    private Provider<SignInViewModel> signInViewModelProvider;

    private Provider<Productionsequencerepository> productionsequencerepositoryProvider;

    private Provider<SelectedLoadinsequenceinfoViewModel> selectedLoadinsequenceinfoViewModelProvider;

    private Provider<MachineloadingViewModel> machineloadingViewModelProvider;

    private Provider<MachinesignoffViewModel> machinesignoffViewModelProvider;

    private Provider<ManufacturingQualityOperationViewModel> manufacturingQualityOperationViewModelProvider;

    private Provider<ManufacturingAddDefectsViewModel> manufacturingAddDefectsViewModelProvider;

    private Provider<ManufacturingAddDefectsDetailsViewModel> manufacturingAddDefectsDetailsViewModelProvider;

    private Provider<ProductionRepairViewModel> productionRepairViewModelProvider;

    private Provider<ProductionDefectRepairViewModel> productionDefectRepairViewModelProvider;

    private Provider<QualityRepairViewModel> qualityRepairViewModelProvider;

    private Provider<QualityDefectRepairViewModel> qualityDefectRepairViewModelProvider;

    private Provider<RandomQualityInceptionViewModel> randomQualityInceptionViewModelProvider;

    private Provider<ProductionRejectionViewModel> productionRejectionViewModelProvider;

    private Provider<QualityDecisionViewModel> qualityDecisionViewModelProvider;

    private QualityDecisionFragmentSubcomponentImpl(QualityDecisionFragment arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(15).put(ProductionsequenceViewModel.class, (Provider) productionsequenceViewModelProvider).put(SignInViewModel.class, (Provider) signInViewModelProvider).put(SelectedLoadinsequenceinfoViewModel.class, (Provider) selectedLoadinsequenceinfoViewModelProvider).put(MachineloadingViewModel.class, (Provider) machineloadingViewModelProvider).put(MachinesignoffViewModel.class, (Provider) machinesignoffViewModelProvider).put(ManufacturingQualityOperationViewModel.class, (Provider) manufacturingQualityOperationViewModelProvider).put(ManufacturingAddDefectsViewModel.class, (Provider) manufacturingAddDefectsViewModelProvider).put(ManufacturingAddDefectsDetailsViewModel.class, (Provider) manufacturingAddDefectsDetailsViewModelProvider).put(ProductionRepairViewModel.class, (Provider) productionRepairViewModelProvider).put(ProductionDefectRepairViewModel.class, (Provider) productionDefectRepairViewModelProvider).put(QualityRepairViewModel.class, (Provider) qualityRepairViewModelProvider).put(QualityDefectRepairViewModel.class, (Provider) qualityDefectRepairViewModelProvider).put(RandomQualityInceptionViewModel.class, (Provider) randomQualityInceptionViewModelProvider).put(ProductionRejectionViewModel.class, (Provider) productionRejectionViewModelProvider).put(QualityDecisionViewModel.class, (Provider) qualityDecisionViewModelProvider).build();
    }

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final QualityDecisionFragment arg0) {
      this.productionsequenceViewModelProvider = ProductionsequenceViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.authenticationrepositoryProvider = Authenticationrepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.signInViewModelProvider = SignInViewModel_Factory.create(authenticationrepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionsequencerepositoryProvider = Productionsequencerepository_Factory.create(DaggerApplicationComponent.this.providesAPiInterfaceProvider);
      this.selectedLoadinsequenceinfoViewModelProvider = SelectedLoadinsequenceinfoViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machineloadingViewModelProvider = MachineloadingViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.machinesignoffViewModelProvider = MachinesignoffViewModel_Factory.create(productionsequencerepositoryProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingQualityOperationViewModelProvider = ManufacturingQualityOperationViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsViewModelProvider = ManufacturingAddDefectsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.manufacturingAddDefectsDetailsViewModelProvider = ManufacturingAddDefectsDetailsViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRepairViewModelProvider = ProductionRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionDefectRepairViewModelProvider = ProductionDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityRepairViewModelProvider = QualityRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDefectRepairViewModelProvider = QualityDefectRepairViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.randomQualityInceptionViewModelProvider = RandomQualityInceptionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.productionRejectionViewModelProvider = ProductionRejectionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
      this.qualityDecisionViewModelProvider = QualityDecisionViewModel_Factory.create(DaggerApplicationComponent.this.provideGsonProvider, DaggerApplicationComponent.this.providesAPiInterfaceProvider, DaggerApplicationComponent.this.provideGsonProvider);
    }

    @Override
    public void inject(QualityDecisionFragment arg0) {
      injectQualityDecisionFragment(arg0);
    }

    private QualityDecisionFragment injectQualityDecisionFragment(
        QualityDecisionFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfObject());
      QualityDecisionFragment_MembersInjector.injectProvider(instance, getViewModelProviderFactory());
      return instance;
    }
  }
}
