// Generated by view binder compiler. Do not edit!
package com.example.gbsbadrsf.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gbsbadrsf.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentQualityDefectRepairBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextInputLayout approvedQty;

  @NonNull
  public final TextView childCode;

  @NonNull
  public final TextView childDesc;

  @NonNull
  public final TextView childTxt;

  @NonNull
  public final LinearLayout dataLayout;

  @NonNull
  public final TextView defectQtn;

  @NonNull
  public final TextView defectQtnTxt;

  @NonNull
  public final RecyclerView defectsDetailsList;

  @NonNull
  public final TextView operation;

  @NonNull
  public final TextView operationTxt;

  @NonNull
  public final TextView qualityRepairTxt;

  @NonNull
  public final MaterialButton reopenDefectBtn;

  @NonNull
  public final MaterialButton saveBtn;

  private FragmentQualityDefectRepairBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextInputLayout approvedQty, @NonNull TextView childCode,
      @NonNull TextView childDesc, @NonNull TextView childTxt, @NonNull LinearLayout dataLayout,
      @NonNull TextView defectQtn, @NonNull TextView defectQtnTxt,
      @NonNull RecyclerView defectsDetailsList, @NonNull TextView operation,
      @NonNull TextView operationTxt, @NonNull TextView qualityRepairTxt,
      @NonNull MaterialButton reopenDefectBtn, @NonNull MaterialButton saveBtn) {
    this.rootView = rootView;
    this.approvedQty = approvedQty;
    this.childCode = childCode;
    this.childDesc = childDesc;
    this.childTxt = childTxt;
    this.dataLayout = dataLayout;
    this.defectQtn = defectQtn;
    this.defectQtnTxt = defectQtnTxt;
    this.defectsDetailsList = defectsDetailsList;
    this.operation = operation;
    this.operationTxt = operationTxt;
    this.qualityRepairTxt = qualityRepairTxt;
    this.reopenDefectBtn = reopenDefectBtn;
    this.saveBtn = saveBtn;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentQualityDefectRepairBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentQualityDefectRepairBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_quality_defect_repair, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentQualityDefectRepairBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.approved_qty;
      TextInputLayout approvedQty = ViewBindings.findChildViewById(rootView, id);
      if (approvedQty == null) {
        break missingId;
      }

      id = R.id.child_code;
      TextView childCode = ViewBindings.findChildViewById(rootView, id);
      if (childCode == null) {
        break missingId;
      }

      id = R.id.child_desc;
      TextView childDesc = ViewBindings.findChildViewById(rootView, id);
      if (childDesc == null) {
        break missingId;
      }

      id = R.id.child_txt;
      TextView childTxt = ViewBindings.findChildViewById(rootView, id);
      if (childTxt == null) {
        break missingId;
      }

      id = R.id.data_layout;
      LinearLayout dataLayout = ViewBindings.findChildViewById(rootView, id);
      if (dataLayout == null) {
        break missingId;
      }

      id = R.id.defect_qtn;
      TextView defectQtn = ViewBindings.findChildViewById(rootView, id);
      if (defectQtn == null) {
        break missingId;
      }

      id = R.id.defect_qtn_txt;
      TextView defectQtnTxt = ViewBindings.findChildViewById(rootView, id);
      if (defectQtnTxt == null) {
        break missingId;
      }

      id = R.id.defects_details_list;
      RecyclerView defectsDetailsList = ViewBindings.findChildViewById(rootView, id);
      if (defectsDetailsList == null) {
        break missingId;
      }

      id = R.id.operation;
      TextView operation = ViewBindings.findChildViewById(rootView, id);
      if (operation == null) {
        break missingId;
      }

      id = R.id.operation_txt;
      TextView operationTxt = ViewBindings.findChildViewById(rootView, id);
      if (operationTxt == null) {
        break missingId;
      }

      id = R.id.quality_repair_txt;
      TextView qualityRepairTxt = ViewBindings.findChildViewById(rootView, id);
      if (qualityRepairTxt == null) {
        break missingId;
      }

      id = R.id.reopen_defect_btn;
      MaterialButton reopenDefectBtn = ViewBindings.findChildViewById(rootView, id);
      if (reopenDefectBtn == null) {
        break missingId;
      }

      id = R.id.save_btn;
      MaterialButton saveBtn = ViewBindings.findChildViewById(rootView, id);
      if (saveBtn == null) {
        break missingId;
      }

      return new FragmentQualityDefectRepairBinding((ConstraintLayout) rootView, approvedQty,
          childCode, childDesc, childTxt, dataLayout, defectQtn, defectQtnTxt, defectsDetailsList,
          operation, operationTxt, qualityRepairTxt, reopenDefectBtn, saveBtn);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
