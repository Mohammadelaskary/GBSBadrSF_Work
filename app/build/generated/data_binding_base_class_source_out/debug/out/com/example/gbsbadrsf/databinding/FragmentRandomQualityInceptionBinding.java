// Generated by view binder compiler. Do not edit!
package com.example.gbsbadrsf.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gbsbadrsf.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentRandomQualityInceptionBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView childId;

  @NonNull
  public final TextView childcodeTxt;

  @NonNull
  public final TextView childesc;

  @NonNull
  public final TextInputLayout defectedQty;

  @NonNull
  public final TextView jobOrderName;

  @NonNull
  public final TextView jobOrderNameTxt;

  @NonNull
  public final TextView jobOrderQty;

  @NonNull
  public final TextView jobOrderQtyTxt;

  @NonNull
  public final TextView loadingQty;

  @NonNull
  public final TextView loadingquantityTxt;

  @NonNull
  public final TextInputLayout machineDieCode;

  @NonNull
  public final ImageView machinecodebarcodeImg;

  @NonNull
  public final TextInputLayout notes;

  @NonNull
  public final TextView operation;

  @NonNull
  public final TextView operationTxt;

  @NonNull
  public final TextView randomQualityInspectionTxt;

  @NonNull
  public final TextInputLayout sampleQty;

  @NonNull
  public final MaterialButton saveBtn;

  private FragmentRandomQualityInceptionBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView childId, @NonNull TextView childcodeTxt, @NonNull TextView childesc,
      @NonNull TextInputLayout defectedQty, @NonNull TextView jobOrderName,
      @NonNull TextView jobOrderNameTxt, @NonNull TextView jobOrderQty,
      @NonNull TextView jobOrderQtyTxt, @NonNull TextView loadingQty,
      @NonNull TextView loadingquantityTxt, @NonNull TextInputLayout machineDieCode,
      @NonNull ImageView machinecodebarcodeImg, @NonNull TextInputLayout notes,
      @NonNull TextView operation, @NonNull TextView operationTxt,
      @NonNull TextView randomQualityInspectionTxt, @NonNull TextInputLayout sampleQty,
      @NonNull MaterialButton saveBtn) {
    this.rootView = rootView;
    this.childId = childId;
    this.childcodeTxt = childcodeTxt;
    this.childesc = childesc;
    this.defectedQty = defectedQty;
    this.jobOrderName = jobOrderName;
    this.jobOrderNameTxt = jobOrderNameTxt;
    this.jobOrderQty = jobOrderQty;
    this.jobOrderQtyTxt = jobOrderQtyTxt;
    this.loadingQty = loadingQty;
    this.loadingquantityTxt = loadingquantityTxt;
    this.machineDieCode = machineDieCode;
    this.machinecodebarcodeImg = machinecodebarcodeImg;
    this.notes = notes;
    this.operation = operation;
    this.operationTxt = operationTxt;
    this.randomQualityInspectionTxt = randomQualityInspectionTxt;
    this.sampleQty = sampleQty;
    this.saveBtn = saveBtn;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentRandomQualityInceptionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentRandomQualityInceptionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_random_quality_inception, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentRandomQualityInceptionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.child_id;
      TextView childId = ViewBindings.findChildViewById(rootView, id);
      if (childId == null) {
        break missingId;
      }

      id = R.id.childcode_txt;
      TextView childcodeTxt = ViewBindings.findChildViewById(rootView, id);
      if (childcodeTxt == null) {
        break missingId;
      }

      id = R.id.childesc;
      TextView childesc = ViewBindings.findChildViewById(rootView, id);
      if (childesc == null) {
        break missingId;
      }

      id = R.id.defected_qty;
      TextInputLayout defectedQty = ViewBindings.findChildViewById(rootView, id);
      if (defectedQty == null) {
        break missingId;
      }

      id = R.id.job_order_name;
      TextView jobOrderName = ViewBindings.findChildViewById(rootView, id);
      if (jobOrderName == null) {
        break missingId;
      }

      id = R.id.job_order_name_txt;
      TextView jobOrderNameTxt = ViewBindings.findChildViewById(rootView, id);
      if (jobOrderNameTxt == null) {
        break missingId;
      }

      id = R.id.job_order_qty;
      TextView jobOrderQty = ViewBindings.findChildViewById(rootView, id);
      if (jobOrderQty == null) {
        break missingId;
      }

      id = R.id.job_order_qty_txt;
      TextView jobOrderQtyTxt = ViewBindings.findChildViewById(rootView, id);
      if (jobOrderQtyTxt == null) {
        break missingId;
      }

      id = R.id.loading_qty;
      TextView loadingQty = ViewBindings.findChildViewById(rootView, id);
      if (loadingQty == null) {
        break missingId;
      }

      id = R.id.loadingquantity_txt;
      TextView loadingquantityTxt = ViewBindings.findChildViewById(rootView, id);
      if (loadingquantityTxt == null) {
        break missingId;
      }

      id = R.id.machine_die_code;
      TextInputLayout machineDieCode = ViewBindings.findChildViewById(rootView, id);
      if (machineDieCode == null) {
        break missingId;
      }

      id = R.id.machinecodebarcode_img;
      ImageView machinecodebarcodeImg = ViewBindings.findChildViewById(rootView, id);
      if (machinecodebarcodeImg == null) {
        break missingId;
      }

      id = R.id.notes;
      TextInputLayout notes = ViewBindings.findChildViewById(rootView, id);
      if (notes == null) {
        break missingId;
      }

      id = R.id.operation;
      TextView operation = ViewBindings.findChildViewById(rootView, id);
      if (operation == null) {
        break missingId;
      }

      id = R.id.operation_txt;
      TextView operationTxt = ViewBindings.findChildViewById(rootView, id);
      if (operationTxt == null) {
        break missingId;
      }

      id = R.id.random_quality_inspection_txt;
      TextView randomQualityInspectionTxt = ViewBindings.findChildViewById(rootView, id);
      if (randomQualityInspectionTxt == null) {
        break missingId;
      }

      id = R.id.sample_qty;
      TextInputLayout sampleQty = ViewBindings.findChildViewById(rootView, id);
      if (sampleQty == null) {
        break missingId;
      }

      id = R.id.save_btn;
      MaterialButton saveBtn = ViewBindings.findChildViewById(rootView, id);
      if (saveBtn == null) {
        break missingId;
      }

      return new FragmentRandomQualityInceptionBinding((ConstraintLayout) rootView, childId,
          childcodeTxt, childesc, defectedQty, jobOrderName, jobOrderNameTxt, jobOrderQty,
          jobOrderQtyTxt, loadingQty, loadingquantityTxt, machineDieCode, machinecodebarcodeImg,
          notes, operation, operationTxt, randomQualityInspectionTxt, sampleQty, saveBtn);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
