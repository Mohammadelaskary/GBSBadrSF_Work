// Generated by view binder compiler. Do not edit!
package com.example.gbsbadrsf.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.example.gbsbadrsf.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentQualityrepairBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final EditText approvedqtyEdt;

  @NonNull
  public final TextView approvedqtyTxt;

  @NonNull
  public final TextView approvedqtyintableTxt;

  @NonNull
  public final ImageView basketbarcodeImg;

  @NonNull
  public final EditText basketcodeEdt;

  @NonNull
  public final TextView basketcodeTxt;

  @NonNull
  public final TextView childTxt;

  @NonNull
  public final TextView childcode;

  @NonNull
  public final TextView childesc;

  @NonNull
  public final TextView childintableTxt;

  @NonNull
  public final ConstraintLayout constraint;

  @NonNull
  public final MaterialButton createscrapBtn;

  @NonNull
  public final TextView defectnameTxt;

  @NonNull
  public final TextView defectqtn;

  @NonNull
  public final RecyclerView defectqtnRv;

  @NonNull
  public final TextView defectqtyTxt;

  @NonNull
  public final TextView defectquantityTxt;

  @NonNull
  public final HorizontalScrollView hsv;

  @NonNull
  public final TextView notesTxt;

  @NonNull
  public final TextView operation;

  @NonNull
  public final TextView operationTxt;

  @NonNull
  public final MaterialButton qtnokBtn;

  @NonNull
  public final TextView qualityrepairTxt;

  @NonNull
  public final MaterialButton reopendefectBtn;

  @NonNull
  public final TextView repairedqtyTxt;

  @NonNull
  public final View view;

  private FragmentQualityrepairBinding(@NonNull ConstraintLayout rootView,
      @NonNull EditText approvedqtyEdt, @NonNull TextView approvedqtyTxt,
      @NonNull TextView approvedqtyintableTxt, @NonNull ImageView basketbarcodeImg,
      @NonNull EditText basketcodeEdt, @NonNull TextView basketcodeTxt, @NonNull TextView childTxt,
      @NonNull TextView childcode, @NonNull TextView childesc, @NonNull TextView childintableTxt,
      @NonNull ConstraintLayout constraint, @NonNull MaterialButton createscrapBtn,
      @NonNull TextView defectnameTxt, @NonNull TextView defectqtn,
      @NonNull RecyclerView defectqtnRv, @NonNull TextView defectqtyTxt,
      @NonNull TextView defectquantityTxt, @NonNull HorizontalScrollView hsv,
      @NonNull TextView notesTxt, @NonNull TextView operation, @NonNull TextView operationTxt,
      @NonNull MaterialButton qtnokBtn, @NonNull TextView qualityrepairTxt,
      @NonNull MaterialButton reopendefectBtn, @NonNull TextView repairedqtyTxt,
      @NonNull View view) {
    this.rootView = rootView;
    this.approvedqtyEdt = approvedqtyEdt;
    this.approvedqtyTxt = approvedqtyTxt;
    this.approvedqtyintableTxt = approvedqtyintableTxt;
    this.basketbarcodeImg = basketbarcodeImg;
    this.basketcodeEdt = basketcodeEdt;
    this.basketcodeTxt = basketcodeTxt;
    this.childTxt = childTxt;
    this.childcode = childcode;
    this.childesc = childesc;
    this.childintableTxt = childintableTxt;
    this.constraint = constraint;
    this.createscrapBtn = createscrapBtn;
    this.defectnameTxt = defectnameTxt;
    this.defectqtn = defectqtn;
    this.defectqtnRv = defectqtnRv;
    this.defectqtyTxt = defectqtyTxt;
    this.defectquantityTxt = defectquantityTxt;
    this.hsv = hsv;
    this.notesTxt = notesTxt;
    this.operation = operation;
    this.operationTxt = operationTxt;
    this.qtnokBtn = qtnokBtn;
    this.qualityrepairTxt = qualityrepairTxt;
    this.reopendefectBtn = reopendefectBtn;
    this.repairedqtyTxt = repairedqtyTxt;
    this.view = view;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentQualityrepairBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentQualityrepairBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_qualityrepair, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentQualityrepairBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.approvedqty_edt;
      EditText approvedqtyEdt = rootView.findViewById(id);
      if (approvedqtyEdt == null) {
        break missingId;
      }

      id = R.id.approvedqty_txt;
      TextView approvedqtyTxt = rootView.findViewById(id);
      if (approvedqtyTxt == null) {
        break missingId;
      }

      id = R.id.approvedqtyintable_txt;
      TextView approvedqtyintableTxt = rootView.findViewById(id);
      if (approvedqtyintableTxt == null) {
        break missingId;
      }

      id = R.id.basketbarcode_img;
      ImageView basketbarcodeImg = rootView.findViewById(id);
      if (basketbarcodeImg == null) {
        break missingId;
      }

      id = R.id.basketcode_edt;
      EditText basketcodeEdt = rootView.findViewById(id);
      if (basketcodeEdt == null) {
        break missingId;
      }

      id = R.id.basketcode_txt;
      TextView basketcodeTxt = rootView.findViewById(id);
      if (basketcodeTxt == null) {
        break missingId;
      }

      id = R.id.child_txt;
      TextView childTxt = rootView.findViewById(id);
      if (childTxt == null) {
        break missingId;
      }

      id = R.id.childcode;
      TextView childcode = rootView.findViewById(id);
      if (childcode == null) {
        break missingId;
      }

      id = R.id.childesc;
      TextView childesc = rootView.findViewById(id);
      if (childesc == null) {
        break missingId;
      }

      id = R.id.childintable_txt;
      TextView childintableTxt = rootView.findViewById(id);
      if (childintableTxt == null) {
        break missingId;
      }

      id = R.id.constraint;
      ConstraintLayout constraint = rootView.findViewById(id);
      if (constraint == null) {
        break missingId;
      }

      id = R.id.createscrap_btn;
      MaterialButton createscrapBtn = rootView.findViewById(id);
      if (createscrapBtn == null) {
        break missingId;
      }

      id = R.id.defectname_txt;
      TextView defectnameTxt = rootView.findViewById(id);
      if (defectnameTxt == null) {
        break missingId;
      }

      id = R.id.defectqtn;
      TextView defectqtn = rootView.findViewById(id);
      if (defectqtn == null) {
        break missingId;
      }

      id = R.id.defectqtn_rv;
      RecyclerView defectqtnRv = rootView.findViewById(id);
      if (defectqtnRv == null) {
        break missingId;
      }

      id = R.id.defectqty_txt;
      TextView defectqtyTxt = rootView.findViewById(id);
      if (defectqtyTxt == null) {
        break missingId;
      }

      id = R.id.defectquantity_txt;
      TextView defectquantityTxt = rootView.findViewById(id);
      if (defectquantityTxt == null) {
        break missingId;
      }

      id = R.id.hsv;
      HorizontalScrollView hsv = rootView.findViewById(id);
      if (hsv == null) {
        break missingId;
      }

      id = R.id.notes_txt;
      TextView notesTxt = rootView.findViewById(id);
      if (notesTxt == null) {
        break missingId;
      }

      id = R.id.operation;
      TextView operation = rootView.findViewById(id);
      if (operation == null) {
        break missingId;
      }

      id = R.id.operation_txt;
      TextView operationTxt = rootView.findViewById(id);
      if (operationTxt == null) {
        break missingId;
      }

      id = R.id.qtnok_btn;
      MaterialButton qtnokBtn = rootView.findViewById(id);
      if (qtnokBtn == null) {
        break missingId;
      }

      id = R.id.qualityrepair_txt;
      TextView qualityrepairTxt = rootView.findViewById(id);
      if (qualityrepairTxt == null) {
        break missingId;
      }

      id = R.id.reopendefect_btn;
      MaterialButton reopendefectBtn = rootView.findViewById(id);
      if (reopendefectBtn == null) {
        break missingId;
      }

      id = R.id.repairedqty_txt;
      TextView repairedqtyTxt = rootView.findViewById(id);
      if (repairedqtyTxt == null) {
        break missingId;
      }

      id = R.id.view;
      View view = rootView.findViewById(id);
      if (view == null) {
        break missingId;
      }

      return new FragmentQualityrepairBinding((ConstraintLayout) rootView, approvedqtyEdt,
          approvedqtyTxt, approvedqtyintableTxt, basketbarcodeImg, basketcodeEdt, basketcodeTxt,
          childTxt, childcode, childesc, childintableTxt, constraint, createscrapBtn, defectnameTxt,
          defectqtn, defectqtnRv, defectqtyTxt, defectquantityTxt, hsv, notesTxt, operation,
          operationTxt, qtnokBtn, qualityrepairTxt, reopendefectBtn, repairedqtyTxt, view);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
